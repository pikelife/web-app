echo = console.log
flows = require 'streamline/lib/util/flows'
neo4j = require '../'

db = new neo4j.GraphDatabase process.env.NEO4J_URL || 'http://localhost:7474'

# Streamline wrapper to support futures:
cypher = (opts, _) ->
    db.cypher opts, _

NUM_NODES = 5
NUM_QUERIES = 500

echo "Setup: creating #{NUM_NODES} nodes with no rels..."

createProps = ->
    suite: module.filename
    rand: "#{Math.random()}"[2..]

results = cypher
    query: '''
        UNWIND {props} AS props
        CREATE (n:Test {props})
        RETURN n
    '''
    params:
        props: [
            createProps()
            createProps()
            createProps()
        ]
, _

nodes =
    for result in results
        result.n

echo "Test: randomly creating #{NUM_QUERIES} rels between these nodes..."

randomNode = ->
    nodes[Math.floor Math.random() * NUM_NODES]

flows.collect _,
    for i in [1..NUM_QUERIES]
        nodeA = randomNode()
        nodeB = randomNode()

        cypher
            query: """
                START a = node({idA}), b = node({idB})
                CREATE (a) -[r:TEST {props}]-> (b)
                RETURN r
            """
            params:
                idA: nodeA._id
                idB: nodeB._id
                props: createProps()
        , !_

echo 'Teardown: deleting all created nodes & rels...'
cypher
    query: '''
        MATCH (n:Test {suite: {suite}})
        OPTIONAL MATCH (n) -[r]- ()
        DELETE n, r
    '''
    params: createProps()
, _














# echo 'Setup: creating "root" node with no initial rels...'
# [{root}] = cypher
#     query: '''
#         CREATE (root:Test {props})
#         RETURN root
#     '''
#     params:
#         props: createProps()
# , _
#
# echo 'Test: creating many new nodes attached to root node in both directions...'
# flows.collect _,
#     for i in [1..10]
#         relStr = '-[rel:TEST {relProps}]-'
#         relStr = if (i % 2) then "<#{relStr}" else "#{relStr}>"
#
#         cypher
#             query: """
#                 START root = node({rootId})
#                 CREATE (root) #{relStr} (node {nodeProps})
#                 RETURN root, rel, node
#             """
#             params:
#                 rootId: root._id
#                 relProps: createProps()
#                 nodeProps: createProps()
#         , !_
#
# echo 'Teardown: deleting all created test nodes & rels...'
# cypher
#     query: '''
#         MATCH (root:Test {suite: {suite}})
#         OPTIONAL MATCH (root) -[rel]- ()
#         DELETE root, rel
#     '''
#     params:
#         suite: module.filename
# , _
